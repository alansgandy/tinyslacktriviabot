"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var Utils = (function () {
    function Utils() {
    }
    Utils.makeHint = function (answer) {
        if (answer.length <= 2) {
            return 'answer is too short';
        }
        var answerWithoutSpaces = answer.replace(/\s/g, '');
        var readableCharsLength = answerWithoutSpaces.length;
        var hintCharsLenght = Math.ceil(readableCharsLength * 40 / 100); // move 40% to settings as hintCharactersPercen
        var visibleIndexes = [];
        while (visibleIndexes.length < hintCharsLenght) {
            var randomIndex = Math.floor(Math.random() * answer.length);
            if (visibleIndexes.indexOf(randomIndex) != -1) {
                continue;
            }
            visibleIndexes.push(randomIndex);
        }
        var answerArray = answer.split('');
        for (var i = 0; i < answerArray.length; i++) {
            // Replace hidden indexes with '⁎' and keep whitespace
            if (visibleIndexes.indexOf(i) === -1 && /\s/.test(answerArray[i]) === false) {
                answerArray[i] = '*';
            }
        }
        var hint = answerArray.join('');
        return hint;
    };
    Utils.loadSettings = function (path, shouldThrow) {
        if (path && fs.existsSync(path)) {
            return JSON.parse(fs.readFileSync(path, 'utf8').trim());
        }
        else if (!shouldThrow) {
            return this.loadSettings('./myconfig.json', true);
        }
        else {
            throw 'cannot load settings';
        }
    };
    Utils.loadScores = function (channelId) {
        var path = "data/scores/" + channelId + ".json";
        if (fs.existsSync(path)) {
            return JSON.parse(fs.readFileSync(path, 'utf8').trim());
        }
        return {};
    };
    Utils.saveScores = function (channelId, scores) {
        console.log("Saving scores: " + channelId);
        fs.writeFileSync("data/scores/" + channelId + ".json", JSON.stringify(scores));
    };
    return Utils;
}());
exports.Utils = Utils;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDMUQsQ0FBQztRQUVELE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU0sZ0JBQVUsR0FBakIsVUFBa0IsU0FBUyxFQUFFLE1BQU07UUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBa0IsU0FBVyxDQUFDLENBQUM7UUFDM0MsRUFBRSxDQUFDLGFBQWEsQ0FBQyxpQkFBZSxTQUFTLFVBQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUNILFlBQUM7QUFBRCxDQXJEQSxBQXFEQyxJQUFBO0FBckRZLHNCQUFLIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG5leHBvcnQgY2xhc3MgVXRpbHMge1xuICBzdGF0aWMgbWFrZUhpbnQoYW5zd2VyKSB7XG4gICAgaWYgKGFuc3dlci5sZW5ndGggPD0gMikge1xuICAgICAgcmV0dXJuICdhbnN3ZXIgaXMgdG9vIHNob3J0JztcbiAgICB9XG5cbiAgICB2YXIgYW5zd2VyV2l0aG91dFNwYWNlcyA9IGFuc3dlci5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgIHZhciByZWFkYWJsZUNoYXJzTGVuZ3RoID0gYW5zd2VyV2l0aG91dFNwYWNlcy5sZW5ndGg7XG4gICAgdmFyIGhpbnRDaGFyc0xlbmdodCA9IE1hdGguY2VpbChyZWFkYWJsZUNoYXJzTGVuZ3RoICogNDAgLyAxMDApOyAvLyBtb3ZlIDQwJSB0byBzZXR0aW5ncyBhcyBoaW50Q2hhcmFjdGVyc1BlcmNlblxuICAgIHZhciB2aXNpYmxlSW5kZXhlcyA9IFtdO1xuICAgIHdoaWxlICh2aXNpYmxlSW5kZXhlcy5sZW5ndGggPCBoaW50Q2hhcnNMZW5naHQpIHtcbiAgICAgIHZhciByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFuc3dlci5sZW5ndGgpO1xuICAgICAgaWYgKHZpc2libGVJbmRleGVzLmluZGV4T2YocmFuZG9tSW5kZXgpICE9IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmlzaWJsZUluZGV4ZXMucHVzaChyYW5kb21JbmRleCk7XG4gICAgfVxuXG4gICAgdmFyIGFuc3dlckFycmF5ID0gYW5zd2VyLnNwbGl0KCcnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuc3dlckFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBSZXBsYWNlIGhpZGRlbiBpbmRleGVzIHdpdGggJ+KBjicgYW5kIGtlZXAgd2hpdGVzcGFjZVxuICAgICAgaWYgKHZpc2libGVJbmRleGVzLmluZGV4T2YoaSkgPT09IC0xICYmIC9cXHMvLnRlc3QoYW5zd2VyQXJyYXlbaV0pID09PSBmYWxzZSkge1xuICAgICAgICBhbnN3ZXJBcnJheVtpXSA9ICcqJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGludCA9IGFuc3dlckFycmF5LmpvaW4oJycpO1xuICAgIHJldHVybiBoaW50O1xuICB9XG5cbiAgc3RhdGljIGxvYWRTZXR0aW5ncyhwYXRoLCBzaG91bGRUaHJvdyk6IGFueSB7XG4gICAgaWYgKHBhdGggJiYgZnMuZXhpc3RzU3luYyhwYXRoKSkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGgsICd1dGY4JykudHJpbSgpKTtcbiAgICB9IGVsc2UgaWYgKCFzaG91bGRUaHJvdykge1xuICAgICAgcmV0dXJuIHRoaXMubG9hZFNldHRpbmdzKCcuL215Y29uZmlnLmpzb24nLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ2Nhbm5vdCBsb2FkIHNldHRpbmdzJztcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgbG9hZFNjb3JlcyhjaGFubmVsSWQpIHtcbiAgICB2YXIgcGF0aCA9IGBkYXRhL3Njb3Jlcy8ke2NoYW5uZWxJZH0uanNvbmA7XG4gICAgaWYgKGZzLmV4aXN0c1N5bmMocGF0aCkpIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLCAndXRmOCcpLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgc3RhdGljIHNhdmVTY29yZXMoY2hhbm5lbElkLCBzY29yZXMpIHtcbiAgICBjb25zb2xlLmxvZyhgU2F2aW5nIHNjb3JlczogJHtjaGFubmVsSWR9YCk7XG4gICAgZnMud3JpdGVGaWxlU3luYyhgZGF0YS9zY29yZXMvJHtjaGFubmVsSWR9Lmpzb25gLCBKU09OLnN0cmluZ2lmeShzY29yZXMpKTtcbiAgfVxufVxuIl19
